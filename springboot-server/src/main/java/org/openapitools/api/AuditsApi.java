/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Audit;
import org.openapitools.model.InternalServerError;
import org.openapitools.model.InvalidInputError;
import org.openapitools.model.MissingItemError;
import org.openapitools.model.RunConfig;
import org.openapitools.model.SemConfig;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-09-07T23:20:24.360136977-04:00[America/New_York]", comments = "Generator version: 7.6.0")
@Validated
@Tag(name = "audits", description = "the audits API")
public interface AuditsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /audits/{audit} : gets audit
     * Gets a specific audit
     *
     * @param audit The name of the audit to retrieve. (required)
     * @return A JSON array of audit names, or a specific audit if a name is provided. (status code 200)
     *         or Bad Request - The request was invalid or cannot be served. (status code 400)
     *         or Not Found - The specified audit does not exist. (status code 404)
     *         or Internal Server Error - An unexpected error occurred. (status code 500)
     */
    @Operation(
        operationId = "auditsAuditGet",
        summary = "gets audit",
        description = "Gets a specific audit",
        responses = {
            @ApiResponse(responseCode = "200", description = "A JSON array of audit names, or a specific audit if a name is provided.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Audit.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request - The request was invalid or cannot be served.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = InvalidInputError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found - The specified audit does not exist.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MissingItemError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error - An unexpected error occurred.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = InternalServerError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/audits/{audit}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Audit> auditsAuditGet(
        @Parameter(name = "audit", description = "The name of the audit to retrieve.", required = true, in = ParameterIn.PATH) @PathVariable("audit") String audit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"subAudit\" : [ { \"courses\" : [ \"courses\", \"courses\" ], \"name\" : \"name\", \"description\" : \"description\", \"cardinality\" : \"cardinality\" }, { \"courses\" : [ \"courses\", \"courses\" ], \"name\" : \"name\", \"description\" : \"description\", \"cardinality\" : \"cardinality\" } ], \"info\" : { \"gid\" : \"gid\", \"code\" : \"code\", \"isGenEd\" : false, \"program\" : \"program\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /audits/{audit}/run : Attempts to run the audit.
     *
     * @param audit The name of the audit to run. (required)
     * @param runConfig  (required)
     * @return A JSON array of user names (status code 200)
     *         or Bad Request - The request was invalid or cannot be served. (status code 400)
     *         or Internal Server Error - An unexpected error occurred. (status code 500)
     */
    @Operation(
        operationId = "auditsAuditRunPost",
        summary = "Attempts to run the audit.",
        responses = {
            @ApiResponse(responseCode = "200", description = "A JSON array of user names", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = SemConfig.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request - The request was invalid or cannot be served.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = InvalidInputError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error - An unexpected error occurred.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = InternalServerError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/audits/{audit}/run",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<List<SemConfig>> auditsAuditRunPost(
        @Parameter(name = "audit", description = "The name of the audit to run.", required = true, in = ParameterIn.PATH) @PathVariable("audit") String audit,
        @Parameter(name = "RunConfig", description = "", required = true) @Valid @RequestBody RunConfig runConfig
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"courses\" : [ \"courses\", \"courses\", \"courses\", \"courses\", \"courses\" ], \"numCourses\" : 0 }, { \"courses\" : [ \"courses\", \"courses\", \"courses\", \"courses\", \"courses\" ], \"numCourses\" : 0 }, { \"courses\" : [ \"courses\", \"courses\", \"courses\", \"courses\", \"courses\" ], \"numCourses\" : 0 }, { \"courses\" : [ \"courses\", \"courses\", \"courses\", \"courses\", \"courses\" ], \"numCourses\" : 0 }, { \"courses\" : [ \"courses\", \"courses\", \"courses\", \"courses\", \"courses\" ], \"numCourses\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /audits : gets all audits
     * Gets all the audits
     *
     * @return A JSON array of audit names, or a specific audit if a name is provided. (status code 200)
     *         or Internal Server Error - An unexpected error occurred. (status code 500)
     */
    @Operation(
        operationId = "auditsGet",
        summary = "gets all audits",
        description = "Gets all the audits",
        responses = {
            @ApiResponse(responseCode = "200", description = "A JSON array of audit names, or a specific audit if a name is provided.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Audit.class)))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error - An unexpected error occurred.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = InternalServerError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/audits",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Audit>> auditsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"subAudit\" : [ { \"courses\" : [ \"courses\", \"courses\" ], \"name\" : \"name\", \"description\" : \"description\", \"cardinality\" : \"cardinality\" }, { \"courses\" : [ \"courses\", \"courses\" ], \"name\" : \"name\", \"description\" : \"description\", \"cardinality\" : \"cardinality\" } ], \"info\" : { \"gid\" : \"gid\", \"code\" : \"code\", \"isGenEd\" : false, \"program\" : \"program\" } }, { \"subAudit\" : [ { \"courses\" : [ \"courses\", \"courses\" ], \"name\" : \"name\", \"description\" : \"description\", \"cardinality\" : \"cardinality\" }, { \"courses\" : [ \"courses\", \"courses\" ], \"name\" : \"name\", \"description\" : \"description\", \"cardinality\" : \"cardinality\" } ], \"info\" : { \"gid\" : \"gid\", \"code\" : \"code\", \"isGenEd\" : false, \"program\" : \"program\" } } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /audits : submits a new audit.
     * Creates a new audit with the specified name and subAudit.
     *
     * @param audit  (required)
     * @return Audit created successfully (status code 201)
     *         or Bad Request - The request was invalid or cannot be served. (status code 400)
     *         or Internal Server Error - An unexpected error occurred. (status code 500)
     */
    @Operation(
        operationId = "auditsPost",
        summary = "submits a new audit.",
        description = "Creates a new audit with the specified name and subAudit.",
        responses = {
            @ApiResponse(responseCode = "201", description = "Audit created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Audit.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request - The request was invalid or cannot be served.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = InvalidInputError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error - An unexpected error occurred.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = InternalServerError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/audits",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Audit> auditsPost(
        @Parameter(name = "Audit", description = "", required = true) @Valid @RequestBody Audit audit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"subAudit\" : [ { \"courses\" : [ \"courses\", \"courses\" ], \"name\" : \"name\", \"description\" : \"description\", \"cardinality\" : \"cardinality\" }, { \"courses\" : [ \"courses\", \"courses\" ], \"name\" : \"name\", \"description\" : \"description\", \"cardinality\" : \"cardinality\" } ], \"info\" : { \"gid\" : \"gid\", \"code\" : \"code\", \"isGenEd\" : false, \"program\" : \"program\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
