/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Course;
import org.openapitools.model.InternalServerError;
import org.openapitools.model.InvalidInputError;
import org.openapitools.model.MissingItemError;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-07-04T22:02:41.348659615-05:00[America/Chicago]", comments = "Generator version: 7.6.0")
@Validated
@Tag(name = "courses", description = "the courses API")
public interface CoursesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /courses/{code} : gets course information.
     * Gets the course information for the specified course code.
     *
     * @param code The course code to retrieve information for. (required)
     * @return A JSON object containing course information (status code 200)
     *         or Bad Request - The request was invalid or cannot be served. (status code 400)
     *         or Not Found - The specified course does not exist. (status code 404)
     *         or Internal Server Error - An unexpected error occurred. (status code 500)
     */
    @Operation(
        operationId = "coursesCodeGet",
        summary = "gets course information.",
        description = "Gets the course information for the specified course code.",
        responses = {
            @ApiResponse(responseCode = "200", description = "A JSON object containing course information", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Course.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request - The request was invalid or cannot be served.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = InvalidInputError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found - The specified course does not exist.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MissingItemError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error - An unexpected error occurred.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = InternalServerError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/courses/{code}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Course> coursesCodeGet(
        @Parameter(name = "code", description = "The course code to retrieve information for.", required = true, in = ParameterIn.PATH) @PathVariable("code") String code
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"number\" : 0, \"code\" : \"code\", \"credits\" : \"\", \"name\" : \"name\", \"semester\" : \"semester\", \"dept\" : \"dept\", \"prereqs\" : \"prereqs\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
